"""
We will call a string obtained by arranging the characters contained in a string a in some order, an anagram of a.

For example, greenbin is an anagram of beginner. As seen here, when the same character occurs multiple times, that character must be used that number of times.

Given are N strings s(1), s(2), ... , s(N). Each of these strings has a length of 10 and consists of lowercase English characters. Additionally, all of these strings are distinct. 
Find the number of pairs of integers i, j (1 <= i < j <= N) such that s(i) is an anagram of s(j).



Input Format

Input is given from Standard Input in the following format:
N
s(1)
s(2)
...
s(N)


Output Format

Print the number of pairs of integers i, j (1 <= i < j <= N) such that s(i) is an anagram of s(j).
"""





n = int(input())

slowa = []

czy = [0] * n

licznik = 0

for x in range(n):
    
    slowa.append(sorted(input()))
    
slowa = sorted(slowa)
    
for x in range(n-1):
    
    if czy[x] == 0:
        
        suma = 1
        
        for y in range(x+1, n):
            
            if slowa[x] == slowa[y]:
                
                suma += 1
                
                czy[y] = 1
            
            else:
                
                break
        
        licznik += (suma * (suma - 1)) // 2
                
print(licznik)
    
